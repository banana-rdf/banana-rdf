for i in * ;do echo $i >>diff.txt; diff $i  ../../../../plantain_common_jvm/src/main/scala/$i >>diff.txt; done 

model.scala
1c1
< package org.w3.banana.pome.model
---
> package org.w3.banana.plantain.model
3c3
< import java.net.{ URI => jURI }
---
> import akka.http.model.Uri
130c130
< case class URI(underlying: jURI) extends Node
---
> case class URI(underlying: Uri) extends Node
133,141d132
< 
< //JavaScript is Single Threaded so there is no need to synchronise
< object BNode {
<   private var i: Long = 0
<   def generate: BNode = {
<     i += 1
<     BNode("" + i)
<   }
< }

PlantainModule.scala
1c1
< package org.w3.banana.pome
---
> package org.w3.banana.plantain
8,10c8,10
<     with RecordBinderModule {
<   //with TurtleReaderModule
<   //with TurtleWriterModule {
---
>     with RecordBinderModule
>     with TurtleReaderModule
>     with TurtleWriterModule {
18c18
<   //  implicit val TurtleReader: RDFReader[Plantain, Turtle] = PlantainTurtleReader
---
>   implicit val turtleReader: RDFReader[Plantain, Turtle] = PlantainTurtleReader
20c20
<   //  implicit val TurtleWriter: RDFWriter[Plantain, Turtle] = PlantainTurtleWriter
---
>   implicit val turtleWriter: RDFWriter[Plantain, Turtle] = PlantainTurtleWriter

PlantainOps.scala
1c1
< package org.w3.banana.pome
---
> package org.w3.banana.plantain
3,4c3
< import org.w3.banana._
< import java.net.{ URI => jURI }
---
> import java.util.NoSuchElementException
5a5,6
> import akka.http.model.Uri
> import org.w3.banana._
37c38
<   def makeUri(uriStr: String): Plantain#URI = model.URI(new jURI(uriStr))
---
>   def makeUri(uriStr: String): Plantain#URI = model.URI(Uri(uriStr))
43,45c44
<   def makeBNode(): Plantain#BNode = {
<     model.BNode.generate
<   }
---
>   def makeBNode(): Plantain#BNode = model.BNode(java.util.UUID.randomUUID().toString)
112c111
<   def isomorphism(left: Plantain#Graph, right: Plantain#Graph): Boolean =
---
>   def isomorphism(left: Plantain#Graph, right: Plantain#Graph): Boolean = {
113a113
>   }

Plantain.scala
1c1
< package org.w3.banana.pome
---
> package org.w3.banana.plantain
4d3
< //import spray.http.Uri

PlantainURIOps.scala
1c1
< package org.w3.banana.pome
---
> package org.w3.banana.plantain
4,5c4
< import model._
< import java.net.{ URI => jURI }
---
> import org.w3.banana.plantain.model._
11,14c10,11
<   def withoutFragment(uri: Plantain#URI): Plantain#URI = {
<     import uri.underlying._
<     URI(new jURI(getScheme, getUserInfo, getHost, getPort, getPath, getQuery, null))
<   }
---
>   def withoutFragment(uri: Plantain#URI): Plantain#URI =
>     URI(uri.underlying.withoutFragment)
16,19c13,14
<   def withFragment(uri: Plantain#URI, frag: String): Plantain#URI = {
<     import uri.underlying._
<     URI(new jURI(getScheme, getUserInfo, getHost, getPort, getPath, getQuery, frag))
<   }
---
>   def withFragment(uri: Plantain#URI, frag: String): Plantain#URI =
>     URI(uri.underlying.withFragment(frag))
21,23c16
<   def getFragment(uri: Plantain#URI): Option[String] = {
<     Option(uri.underlying.getFragment)
<   }
---
>   def getFragment(uri: Plantain#URI): Option[String] = uri.underlying.fragment
26,30c19,20
<     import uri.underlying.{ getFragment => fragment, _ }
<     getScheme == null &&
<       getUserInfo == null && getAuthority == null &&
<       (getPath == null || getPath == "") &&
<       getQuery == null && fragment != null
---
>     val u = uri.underlying
>     u.scheme.isEmpty && u.authority.isEmpty && u.path.isEmpty && u.query.isEmpty && u.fragment.isDefined
34c24
<     URI(uri.underlying.resolve(other.underlying))
---
>     URI(other.underlying.resolvedAgainst(uri.underlying))
38,43c28,33
<     val u = uri.underlying
<     val path = u.getPath
<     val newpath = if (path.endsWith("/")) path + segment else path + "/" + segment
<     import u._
<     val res = new jURI(getScheme, getUserInfo, getHost, getPort, newpath, getQuery, null)
<     URI(res)
---
>     val underlying = uri.underlying
>     val path = underlying.path
>     if (path.reverse.startsWithSlash)
>       URI(underlying.copy(path = path + segment))
>     else
>       URI(underlying.copy(path = path / segment))
47c37,41
<     URI(uri.underlying.relativize(other.underlying))
---
>     // TODO should rely on a spray.http.Uri when https://github.com/spray/spray/issues/818 is addressed
>     // for implementation algorithm, see https://github.com/stain/cxf/blob/trunk/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java
>     import java.net.{ URI => jURI }
>     val juri = new jURI(uri.underlying.toString).relativize(new jURI(other.underlying.toString))
>     PlantainOps.makeUri(juri.toString)
50,54c44,46
<   def lastSegment(uri: Plantain#URI): String = {
<     val path = uri.underlying.getPath
<     val i = path.lastIndexOf('/')
<     path.substring(i + 1, path.length)
<   }
---
>   def lastSegment(uri: Plantain#URI): String =
>     uri.underlying.path.reverse.head.toString
> 
